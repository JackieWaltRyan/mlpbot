import sys
from asyncio import sleep
from datetime import datetime
from os import execl, listdir
from random import choice
from threading import Timer
from traceback import format_exc

from discord import Embed, Intents, ActivityType, Activity, Member, utils
from discord.ext.commands import Bot, when_mentioned_or, has_permissions
from discord_components import DiscordComponents
from fuzzywuzzy.fuzz import token_sort_ratio
from pymongo import MongoClient
from pytz import timezone

BOT = Bot(command_prefix=when_mentioned_or("!"), help_command=None, intents=Intents.all())

DB = MongoClient("")

SET, SPAM, BLOCK = DB.server.settings.find_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"}), {}, []


def autores():
    try:
        Timer(1, autores).start()
        atime = int(datetime.now(timezone('Europe/Moscow')).strftime("%H%M%S"))
        print(atime)
        if atime == 80000 or atime == 200000:
            execl(sys.executable, "python", "bot.py", *sys.argv[1:])
    except Exception:
        print(format_exc())


async def messages(name, value):
    try:
        for uid in [x for x in SET["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"].values()]:
            try:
                await BOT.get_user(uid).send(embed=Embed(
                    title="–°–æ–æ–±—â–µ–Ω–∏–µ!", color=0x008000).add_field(name=name, value=value))
            except Exception:
                pass
    except Exception:
        print(format_exc())


async def alerts(name, value):
    try:
        for uid in [x for x in SET["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"].values()]:
            try:
                await BOT.get_user(uid).send(embed=Embed(
                    title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!", color=0xFFA500).add_field(name=name, value=value))
            except Exception:
                pass
    except Exception:
        print(format_exc())


async def errors(name, value, reset=0):
    try:
        for uid in [x for x in SET["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"].values()]:
            try:
                await BOT.get_user(uid).send(embed=Embed(
                    title="–û—à–∏–±–∫–∞!", color=0xFF0000).add_field(name=name, value=value))
            except Exception:
                pass
        if reset == 1:
            execl(sys.executable, "python", "bot.py", *sys.argv[1:])
    except Exception:
        print(format_exc())


@BOT.event
async def on_connect():
    try:
        autores()
    except Exception:
        await errors("–¢–∞–π–º–µ—Ä:", format_exc())


@BOT.event
async def on_ready():
    try:
        DiscordComponents(BOT)
    except Exception:
        await errors("DiscordComponents:", format_exc())
    try:
        await messages(BOT.user, "–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    except Exception:
        await errors("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞:", format_exc())
    try:
        if BOT.user.id == SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –°–µ–ª–µ—Å—Ç–∏—è"]["ID"]:
            await BOT.change_presence(activity=Activity(
                type=ActivityType.watching, name="–∑–∞ –≠–∫–≤–µ—Å—Ç—Ä–∏–µ–π..."))
        if BOT.user.id == SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ—É–Ω–∞"]["ID"]:
            await BOT.change_presence(activity=Activity(
                type=ActivityType.listening, name="—Ç–∏—à–∏–Ω—É –Ω–æ—á–∏..."))
    except Exception:
        await errors("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞:", format_exc())
    try:
        for member in BOT.get_all_members():
            user = DB.server.users.find_one({"_id": member.id})
            if user is None:
                DB.server.users.insert_one({"_id": int(member.id),
                                            "–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": member.name,
                                            "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π",
                                            "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": datetime.now(),
                                            "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "–ù–µ—Ç",
                                            "–†–∞–¥—É–≥–∞": "–ù–µ—Ç",
                                            "–°—Ç—Ä–∞–Ω–∏—Ü–∞": "p0",
                                            "–ö–æ–Ω—Ü–æ–≤–∫–∏": [],
                                            "–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                            "–ü–æ–±–µ–¥ –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                            "–ü–æ—Ä–∞–∂–µ–Ω–∏–π –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                            "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                            "–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ –¢–µ—Ç—Ä–∏—Å": 0,
                                            "–õ—É—á—à–∏–π —Å—á–µ—Ç –≤ –¢–µ—Ç—Ä–∏—Å": 0})
            else:
                if member.bot:
                    DB.server.users.update_one({"_id": member.id}, {"$set": {"–ë–æ—Ç": "–î–∞"}})
                delta = datetime.now() - user["–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"]
                if delta.days >= 7:
                    DB.server.users.update_one({"_id": member.id}, {"$set": {"–°—Ç–∞—Ç—É—Å": "–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π"}})
                    try:
                        await member.add_roles(utils.get(member.guild.roles, id=int(
                            DB.server.roles.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"})["_id"])))
                    except Exception:
                        pass
    except Exception:
        await errors("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", format_exc())
    try:
        for channel in BOT.get_all_channels():
            ch = DB.server.channels.find_one({"_id": channel.id})
            if ch is None:
                DB.server.channels.insert_one({"_id": int(channel.id), "–ù–∞–∑–≤–∞–Ω–∏–µ": channel.name})
            else:
                DB.server.channels.update_one({"_id": channel.id}, {"$set": {"–ù–∞–∑–≤–∞–Ω–∏–µ": channel.name}})
    except Exception:
        await errors("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤:", format_exc())
    try:
        for guild in BOT.guilds:
            for role in guild.roles:
                r = DB.server.roles.find_one({"_id": role.id})
                if r is None:
                    DB.server.roles.insert_one({"_id": int(role.id), "–ù–∞–∑–≤–∞–Ω–∏–µ": role.name})
                else:
                    DB.server.roles.update_one({"_id": role.id}, {"$set": {"–ù–∞–∑–≤–∞–Ω–∏–µ": role.name}})
    except Exception:
        await errors("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π:", format_exc())
    try:
        ok, error, cogs, modules = [], [], SET["–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏"], ""
        for filename in listdir("./modules"):
            if filename.endswith(".py"):
                cog = filename[:-3]
                if cog not in cogs:
                    try:
                        BOT.load_extension(f"modules.{cog.lower()}")
                        ok.append(cog.title())
                    except Exception:
                        error.append(cog.title())
        ok.sort()
        error.sort()
        cogs.sort()
        if len(ok) != 0:
            modules += "**–£—Å–ø–µ—à–Ω–æ:**\n" + "\n".join(x for x in ok)
        if len(error) != 0:
            modules += "\n\n**–ù–µ—É–¥–∞—á–Ω–æ:**\n" + "\n".join(x for x in error)
        if len(cogs) != 0:
            modules += "\n\n**–û—Ç–∫–ª—é—á–µ–Ω–æ:**\n" + "\n".join(x.title() for x in cogs)
        await messages("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", modules)
    except Exception:
        await errors("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", format_exc())
    try:
        if BOT.user.id == SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –°–µ–ª–µ—Å—Ç–∏—è"]["ID"]:
            await messages(BOT.user, "–°–Ω–æ–≤–∞ \"–°–º–æ—Ç—Ä–∏—Ç –∑–∞ –≠–∫–≤–µ—Å—Ç—Ä–∏–µ–π...\"")
        if BOT.user.id == SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ—É–Ω–∞"]["ID"]:
            await messages(BOT.user, "–°–Ω–æ–≤–∞ \"–°–ª—É—à–∞–µ—Ç —Ç–∏—à–∏–Ω—É –Ω–æ—á–∏...\"")
    except Exception:
        await errors("–°–æ–æ–±—â–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", format_exc())


@BOT.event
async def on_message(message):
    try:
        await BOT.process_commands(message)
    except Exception:
        await errors("process_commands:", format_exc())
    try:
        if message.author.id in BLOCK:
            try:
                await message.delete()
            except Exception:
                pass
        else:
            if message.author.id not in [SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –°–µ–ª–µ—Å—Ç–∏—è"]["ID"], SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ—É–Ω–∞"]["ID"]]:
                if SPAM.get(message.author.id) is None:
                    SPAM.update({message.author.id: [message.content]})
                else:
                    SPAM[message.author.id].insert(0, message.content)
                if len(SPAM[message.author.id]) >= 3:
                    if token_sort_ratio(SPAM[message.author.id][0], SPAM[message.author.id][1]) >= 90:
                        if token_sort_ratio(SPAM[message.author.id][1], SPAM[message.author.id][2]) >= 90:
                            try:
                                await message.delete()
                            except Exception:
                                pass
                            await message.author.send(embed=Embed(title="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!", color=0xFFA500).add_field(
                                name="–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∑–∞ —Å–ø–∞–º!", value="–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –Ω–∞ 60 —Å–µ–∫—É–Ω–¥ –∑–∞ —Å–ø–∞–º!"))
                            BLOCK.append(message.author.id)
                            SPAM[message.author.id].clear()
                            await alerts(message.author, "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ —Å–ø–∞–º!")
                            await sleep(60)
                            BLOCK.remove(message.author.id)
    except Exception:
        await errors("–ê–Ω—Ç–∏—Å–ø–∞–º:", format_exc())
    try:
        if message.content.startswith("!cogs"):
            if message.author.bot:
                if message.content.endswith("cjlkzrwuqxcnaznzsx"):
                    await message.delete(delay=1)
                    BOT.unload_extension(f"modules.rainbow")
                    BOT.load_extension(f"modules.rainbow")
    except Exception:
        await errors("–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª—è \"rainbow\":", format_exc())
    try:
        DB.server.users.update_one({"_id": message.author.id},
                                   {"$set": {"–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π", "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": message.created_at}})
        try:
            await message.author.remove_roles(utils.get(message.author.guild.roles, id=int(
                DB.server.roles.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ"})["_id"])))
        except Exception:
            pass
    except Exception:
        await errors("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–∞:", format_exc())


@BOT.event
async def on_raw_reaction_add(payload):
    try:
        post = await BOT.get_channel(payload.channel_id).fetch_message(payload.message_id)
        like, dlike = 0, 0
        for reaction in post.reactions:
            if reaction.emoji == "üëç":
                like = int(reaction.count)
            if reaction.emoji == "üëé":
                dlike = int(reaction.count)
        bots = DB.server.users.count_documents({"–ë–æ—Ç": "–î–∞"})
        ratio = int((DB.server.users.count_documents({"–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π"}) - bots) / 3)
        if like - dlike >= ratio:
            await post.pin()
        if dlike - like >= ratio:
            await post.delete()
    except Exception:
        await errors(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è:", format_exc())


@BOT.event
async def on_member_join(member):
    try:
        e = Embed(title="–í –Ω–∞—à –∫–ª—É–± –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∞—Å—å –º–∏–ª–∞—è –ø–æ–Ω—è—à–∫–∞!", color=0xBA55D3,
                  description=f"–ü–æ–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º: {member.mention}!")
        e.set_thumbnail(url=member.avatar_url)
        e.set_image(url=choice(DB.server.settings.find_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"})["–ê—Ä—Ç—ã –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"]))
        e.set_footer(text=SET["–§—É—Ç–µ—Ä"]["–¢–µ–∫—Å—Ç"], icon_url=SET["–§—É—Ç–µ—Ä"]["–°—Å—ã–ª–∫–∞"])
        await BOT.get_channel(int(DB.server.channels.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ–±–æ–ª—Ç–∞–ª–∫–∞"})["_id"])).send(embed=e)
        user = DB.server.users.find_one({"_id": member.id})
        if user is None:
            DB.server.users.insert_one({"_id": int(member.id),
                                        "–ò–º—è –∞–∫–∫–∞—É–Ω—Ç–∞": member.name,
                                        "–°—Ç–∞—Ç—É—Å": "–ê–∫—Ç–∏–≤–Ω—ã–π",
                                        "–í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è": datetime.now(),
                                        "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è": "–ù–µ—Ç",
                                        "–†–∞–¥—É–≥–∞": "–ù–µ—Ç",
                                        "–°—Ç—Ä–∞–Ω–∏—Ü–∞": "p0",
                                        "–ö–æ–Ω—Ü–æ–≤–∫–∏": [],
                                        "–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                        "–ü–æ–±–µ–¥ –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                        "–ü–æ—Ä–∞–∂–µ–Ω–∏–π –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                        "–ü—Ä–æ—Ü–µ–Ω—Ç –ø–æ–±–µ–¥ –≤ –ö—Ä–µ—Å—Ç–∏–∫–∏-–Ω–æ–ª–∏–∫–∏": 0,
                                        "–°—ã–≥—Ä–∞–Ω–æ –∏–≥—Ä –≤ –¢–µ—Ç—Ä–∏—Å": 0,
                                        "–õ—É—á—à–∏–π —Å—á–µ—Ç –≤ –¢–µ—Ç—Ä–∏—Å": 0})
    except Exception:
        await errors("–ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫:", format_exc())


# –∫–æ–º–∞–Ω–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@BOT.command(description="0", name="help", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", usage="!help")
async def helpmenu(ctx):
    try:
        await ctx.message.delete(delay=1)
        e = Embed(title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥:", color=ctx.author.color)
        list1 = [[x.description for x in BOT.commands], [x.name for x in BOT.commands],
                 [x.help for x in BOT.commands], [x.brief for x in BOT.commands], [x.usage for x in BOT.commands]]
        list2 = []
        i = 0
        while i < len(list1[0]):
            sor = [list1[0][i], list1[1][i], list1[2][i], list1[3][i], list1[4][i]]
            list2.append(sor)
            i += 1
        list2.sort()
        ii = 0
        while ii < len(list2):
            if ctx.message.author.id in [x for x in SET["–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"].values()]:
                if int(list2[ii][0]) <= 9:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            elif ctx.message.author.guild_permissions.administrator:
                if int(list2[ii][0]) <= 8:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            elif ctx.message.author.guild_permissions.manage_messages:
                if int(list2[ii][0]) <= 7:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            else:
                if int(list2[ii][0]) <= 6:
                    e.add_field(name=f"{list2[ii][1]}", inline=False,
                                value=f"–û–ø–∏—Å–∞–Ω–∏–µ: {list2[ii][2]}\n–ü–∞—Ä–∞–º–µ—Ç—Ä: {list2[ii][3]}\n–ü—Ä–∏–º–µ—Ä: {list2[ii][4]}")
            ii += 1
        e.set_footer(text=f"–í –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ—Ñ–∏–∫—Å–∞ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–Ω–∞–∫ ! –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ—Ç–∞ @{BOT.user.name}")
        await ctx.send(embed=e, delete_after=60)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name}\n–ö–∞–Ω–∞–ª: {ctx.message.channel}")
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


# –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@BOT.command(description="8", name="mods", help="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è–º–∏",
             brief="–ù–∏—á–µ–≥–æ / `–ü–∞—Ä–∞–º–µ—Ç—Ä` / `–ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è`", usage="!mods on commands")
@has_permissions(administrator=True)
async def mods(ctx, trigger: str = None, name: str = None):
    try:
        await ctx.message.delete(delay=1)
        arts = DB.server.channels.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ–∞—Ä—Ç—ã"})["_id"]
        darkarts = DB.server.channels.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ—Ç—ë–º–Ω—ã–µ_–∞—Ä—Ç—ã"})["_id"]
        party = DB.server.channels.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "ü¶Ñ–≤–µ—á–µ—Ä–∏–Ω–∫–∞"})["_id"]
        welcome = DB.server.channels.find_one({"–ù–∞–∑–≤–∞–Ω–∏–µ": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"})["_id"]
        desc = {"arts": f"–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–æ–≤—ã—Ö –∞—Ä—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ <#{arts}> –∏ <#{darkarts}>.\n\n–ö–æ–º–∞–Ω–¥—ã –≤ "
                        f"–º–æ–¥—É–ª–µ: !arts",
                "commands": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∫—Ä–æ–º–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö. –î–∞–∂–µ –µ—Å–ª–∏ –º–æ–¥—É–ª—å –æ—Ç–∫–ª—é—á–µ–Ω, "
                            "–∫–æ–º–∞–Ω–¥–∞ \"!help\", –∫–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª—è–º–∏ (!mods), –∏ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –±–æ—Ç–∞ (!res)"
                            " –ø–æ –ø—Ä–µ–∂–Ω–µ–º—É –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.",
                "game": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∏–≥—Ä—É \"–ü–æ—Ö–∏—â–µ–Ω–Ω–∞—è –ø–æ–Ω–∏\" –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ.",
                "player": f"–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –ø–ª–µ–µ—Ä –≤ –∫–∞–Ω–∞–ª–µ <#{party}> –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–∏–º —Å–≤—è–∑–∞–Ω–Ω–æ.",
                "posts": f"–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <#{welcome}>, –æ–±—Ä–∞–±–æ—Ç–∫—É –∏—Ö "
                         f"–∫–Ω–æ–ø–æ–∫ –∏ –≤—ã–¥–∞—á—É —Ä–æ–ª–µ–π.",
                "rainbow": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –Ω–∏–∫–æ–≤. –ü—Ä–æ—â–µ –≥–æ–≤–æ—Ä—è \"–†–∞–¥—É–∂–Ω–∞—è —Ä–æ–ª—å\".\n\n"
                           "–ö–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥—É–ª–µ: !rainbow",
                "tetris": "–ú–æ–¥—É–ª—å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –º–∏–Ω–∏-–∏–≥—Ä—É \"–¢–µ—Ç—Ä–∏—Å\" –∏ –≤—Å–µ —á—Ç–æ —Å –Ω–µ–π —Å–≤—è–∑–∞–Ω–Ω–æ.\n\n–ö–æ–º–∞–Ω–¥—ã –≤ –º–æ–¥—É–ª–µ: !tet"}
        e = None
        if trigger is None and name is None:
            on = []
            off = []
            for cogg in BOT.cogs:
                on.append(cogg.title())
            for filename in listdir("./modules"):
                if filename.endswith(".py"):
                    cogg = filename[:-3]
                    if cogg.title() not in on:
                        off.append(cogg.title())
            on.sort()
            off.sort()
            e = Embed(title="–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
            e.add_field(name="–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", inline=False,
                        value="–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è: **!mods `–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è`**\n"
                              "–í–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å: **!mods on `–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è`**\n"
                              "–û—Ç–∫–ª—é—á–∏—Ç—å –º–æ–¥—É–ª—å: **!mods off `–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è`**\n"
                              "–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥—É–ª—å: **!mods res `–Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è`**")
            if len(on) != 0:
                e.add_field(name="–í–∫–ª—é—á–µ–Ω–æ:", inline=False, value=f"\n".join(x for x in on))
            if len(off) != 0:
                e.add_field(name="–û—Ç–∫–ª—é—á–µ–Ω–æ:", inline=False, value=f"\n".join(x for x in off))
        if trigger is not None:
            ok = []
            error = []
            alert = []
            if trigger == "on":
                if name is not None:
                    if name.lower() in [x.lower() for x in BOT.cogs]:
                        alert.append(name.title())
                    else:
                        try:
                            BOT.load_extension(f"modules.{name.lower()}")
                            ok.append(name.title())
                            DB.server.settings.update_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                                                          {"$pull": {"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": name.title()}})
                        except Exception:
                            error.append(name.title())
                else:
                    for filename in listdir("./modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            if cogg.lower() in [x.lower() for x in BOT.cogs]:
                                alert.append(cogg.title())
                            else:
                                try:
                                    BOT.load_extension(f"modules.{cogg.lower()}")
                                    ok.append(cogg.title())
                                    DB.server.settings.update_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                                                                  {"$pull": {"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": cogg.title()}})
                                except Exception:
                                    error.append(cogg.title())
                ok.sort()
                error.sort()
                alert.sort()
                e = Embed(title="–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
                if len(alert) != 0:
                    e.add_field(name="–û—à–∏–±–∫–∞:", inline=False,
                                value="".join("–ú–æ–¥—É–ª—å \"" + x + "\" —É–∂–µ –≤–∫–ª—é—á–µ–Ω!\n" for x in alert))
            elif trigger == "off":
                if name is not None:
                    if name.lower() not in [x.lower() for x in BOT.cogs]:
                        alert.append(name.title())
                    else:
                        try:
                            BOT.unload_extension(f"modules.{name.lower()}")
                            ok.append(name.title())
                            DB.server.settings.update_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                                                          {"$push": {"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": name.title()}})
                        except Exception:
                            error.append(name.title())
                else:
                    for filename in listdir("./modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            if cogg.lower() not in [x.lower() for x in BOT.cogs]:
                                alert.append(cogg.title())
                            else:
                                try:
                                    BOT.unload_extension(f"modules.{cogg.lower()}")
                                    ok.append(cogg.title())
                                    DB.server.settings.update_one({"_id": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"},
                                                                  {"$push": {"–û—Ç–∫–ª—é—á–µ–Ω–Ω—ã–µ –º–æ–¥—É–ª–∏": cogg.title()}})
                                except Exception:
                                    error.append(cogg.title())
                ok.sort()
                error.sort()
                alert.sort()
                e = Embed(title="–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
                if len(alert) != 0:
                    e.add_field(name="–û—à–∏–±–∫–∞:", inline=False,
                                value="".join("–ú–æ–¥—É–ª—å \"" + x + "\" —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!\n" for x in alert))
            elif trigger == "res":
                if name is not None:
                    try:
                        BOT.unload_extension(f"modules.{name.lower()}")
                        BOT.load_extension(f"modules.{name.lower()}")
                        ok.append(name.title())
                    except Exception:
                        error.append(name.title())
                else:
                    for filename in listdir("modules"):
                        if filename.endswith(".py"):
                            cogg = filename[:-3]
                            try:
                                BOT.unload_extension(f"modules.{cogg.lower()}")
                                BOT.load_extension(f"modules.{cogg.lower()}")
                                ok.append(cogg.title())
                            except Exception:
                                error.append(cogg.title())
                ok.sort()
                error.sort()
                e = Embed(title="–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥—É–ª–µ–π:", color=ctx.author.color)
                if len(ok) != 0:
                    e.add_field(name="–£—Å–ø–µ—à–Ω–æ:", inline=False, value=f"\n".join(x for x in ok))
                if len(error) != 0:
                    e.add_field(name="–ù–µ—É–¥–∞—á–Ω–æ:", inline=False, value=f"\n".join(x for x in error))
            else:
                e = Embed(title=f"–ú–æ–¥—É–ª—å \"{trigger.title()}\":", color=ctx.author.color)
                e.add_field(name="–û–ø–∏—Å–∞–Ω–∏–µ:", inline=False, value=desc[trigger.lower()])
                status = ""
                if trigger.lower() in [x.lower() for x in BOT.cogs]:
                    status = "–í–∫–ª—é—á–µ–Ω"
                else:
                    status = "–û—Ç–∫–ª—é—á–µ–Ω"
                e.add_field(name="–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:", inline=False, value=status)
        e.set_footer(text=SET["–§—É—Ç–µ—Ä"]["–¢–µ–∫—Å—Ç"], icon_url=SET["–§—É—Ç–µ—Ä"]["–°—Å—ã–ª–∫–∞"])
        await ctx.send(embed=e, delete_after=60)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name} {trigger} {name}\n"
                                 f"–ö–∞–Ω–∞–ª: {ctx.message.channel}")
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


@BOT.command(description="8", name="res", help="–ü–æ–ª–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞", brief="–ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ", usage="!res")
@has_permissions(administrator=True)
async def res(ctx):
    try:
        await ctx.message.delete(delay=1)
        await alerts(ctx.author, f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É: {ctx.command.name}\n–ö–∞–Ω–∞–ª: {ctx.message.channel}")
        await sleep(1)
        execl(sys.executable, "python", "bot.py", *sys.argv[1:])
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


# —Å–∫—Ä—ã—Ç—ã–µ –∫–æ–º–∞–Ω–¥—ã
@BOT.command(description="10", name="ban", help="", brief="", usage="")
async def ban(ctx, member: Member = None):
    try:
        await ctx.message.delete(delay=1)
        e = None
        if member is not None:
            e = Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", color=ctx.author.color,
                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member.mention} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω!")
        else:
            e = Embed(title="–ë–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", color=ctx.author.color,
                      description=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ {', '.join([user.mention for user in BOT.users])} —É—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–µ–Ω—ã!")
        await ctx.send(embed=e)
    except Exception:
        await errors(f"–ö–æ–º–∞–Ω–¥–∞ {ctx.command.name}:", format_exc())


if __name__ == "__main__":
    try:
        etime = int(datetime.now(timezone('Europe/Moscow')).strftime("%H%M%S"))
        if 80000 <= etime < 200000:
            BOT.run(SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –°–µ–ª–µ—Å—Ç–∏—è"]["–¢–æ–∫–µ–Ω"])
        if 200000 <= etime < 240000 or 0 <= etime < 80000:
            BOT.run(SET["–ü—Ä–∏–Ω—Ü–µ—Å—Å–∞ –õ—É–Ω–∞"]["–¢–æ–∫–µ–Ω"])
    except Exception:
        print(format_exc())
